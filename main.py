import logging
import telebot
import re
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials
import gspread
import os
import json

# –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
logging.basicConfig(level=logging.DEBUG)

# –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
API_TOKEN = '7793273417:AAEQDFj3MFUaIo9PMKP9jgJpqN4zWvFBvMY'
bot = telebot.TeleBot(API_TOKEN)

# Google Sheets
creds_dict = json.loads(os.environ['GOOGLE_CREDS'])

SPREADSHEET_ID = '18H408uOOG8fgDlUUhSGY1I4viy88x7CNWrbwRS6bp9k'

# –õ–∏—Å—Ç—ã
SHEET_XISOB = 'Xisob'
SHEET_BALANCE = 'Balance'

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive"
]
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet_xisob = client.open_by_key(SPREADSHEET_ID).worksheet(SHEET_XISOB)
sheet_balance = client.open_by_key(SPREADSHEET_ID).worksheet(SHEET_BALANCE)

# ID –≥—Ä—É–ø–ø
GROUP2_CHAT_ID = -  1002181407245 # Balance
GROUP1_CHAT_ID = -1002269282621  # Xisob

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

def find_first_empty_row_xisob(sheet):
    all_values = sheet.get_all_values()
    for i, row in enumerate(all_values, start=1):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ A-D (–∏–Ω–¥–µ–∫—Å—ã 0-3)
        # –ï—Å–ª–∏ –≤ –Ω–∏—Ö –ø—É—Å—Ç–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (1-based)
        cols_to_check = row[:4] + [''] * (4 - len(row))
        if all(cell.strip() == '' for cell in cols_to_check):
            return i
    return len(all_values) + 1  # –ï—Å–ª–∏ –Ω–µ—Ç –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫, –∑–Ω–∞—á–∏—Ç –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞


def append_to_xisob(row_data):
    try:
        row_number = find_first_empty_row_xisob(sheet_xisob)
        # row_data ‚Äî —Å–ø–∏—Å–æ–∫ –∏–∑ 4 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (A, B, C, D)
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç A –¥–æ D –≤ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        cell_range = f"A{row_number}:D{row_number}"
        sheet_xisob.update(cell_range, [row_data])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Xisob: {e}")



def append_to_balance(amount, name, card):
    all_data = sheet_balance.get_all_values()
    empty_row = len(all_data) + 1
    row = [''] * 7
    row[0] = datetime.now().strftime("%Y-%m-%d")
    row[2] = str(amount)
    row[5] = name
    row[6] = card
    sheet_balance.insert_row(row, empty_row)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø—ã (Balance)
@bot.message_handler(func=lambda m: m.chat.id == GROUP2_CHAT_ID)
def handle_group2(m):
    text = m.text.strip()
    if not text.lower().startswith('reg'):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å 'Reg'
        logging.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'Reg', –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
        return

    pattern = r"Reg\s+([\d/]+)\s+paid\s+(\d+)\s*(k)?\s+(Terminal|Naxt|USD|Bank)"
    match = re.search(pattern, text, re.IGNORECASE)
    if match:
        reg_number = match.group(1)
        amount = int(match.group(2))
        if match.group(3):
            amount *= 1000
        payment_type = match.group(4).capitalize()
        date = datetime.now().strftime("%Y-%m-%d")
        row = [date, reg_number, str(amount), payment_type]
        append_to_xisob(row)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ —Ç–æ–∂–µ –∏–¥–µ—Ç –≤ –ª–∏—Å—Ç Xisob?
        bot.send_message(m.chat.id, "‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—Å—Ç Xisob.", reply_to_message_id=m.message_id)
    else:
        bot.send_message(m.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: Reg 123/4 paid 500k Terminal", reply_to_message_id=m.message_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã (Xisob)
@bot.message_handler(func=lambda m: m.chat.id == GROUP1_CHAT_ID)
def handle_group1(m):
    logging.debug(f"Group 1 message: {m.text}")
    pattern = r"(\d+)(k)?\s+(\w+)\s+(\w+)"
    match = re.search(pattern, m.text.strip(), re.IGNORECASE)
    if match:
        amount = int(match.group(1))
        if match.group(2):
            amount *= 1000
        name = match.group(3)
        card = match.group(4)
        append_to_balance(amount, name, card)
        bot.send_message(m.chat.id, "‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—Å—Ç Balance.", reply_to_message_id=m.message_id)
    else:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å —á–∞—Ç,
        # –ª–∏–±–æ –¥–µ–ª–∞—Ç—å —ç—Ç–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–Ω–æ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –ø–æ–ø—ã—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        logging.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç Balance, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –¥–≤–µ –≥—Ä—É–ø–ø—ã...")
bot.polling(none_stop=True)

